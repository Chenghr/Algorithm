"""
    数字以 0123456789 10 11 12 13 14 15…的格式序列化到一个字符序列中。
    在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。

    请写一个函数，求任意第n位对应的数字。
"""

class Solution:
    def findNthDigit(self, n: int) -> int:
        """
            0-9 : 1 * 10
            10 - 99: 2 * 90 = 2 * 9 * 10
            100 - 999: 3 * 900 = 3 * 9 * 100
            1000 - 9999: 4 * 90000 = 4 * 9 * 1000
            ...

            k 位数: k * 9 * 10^(k-1)

            1. 确定第 n 位对应的数字的位数区间；
            2. 确定位数区间中的第几个数；
            3. 确定数中具体的第几位。
        """
        if n < 10:
            return n

        k = 1  # k 位数
        while True:
            # k 位数所在区间的数占据位的数目
            bitSum = 10 if k == 1 else k * 9 * (10 ** (k-1))  
            if bitSum < n:
                n -= bitSum
                k += 1
            else:
                break
            
        num = str(10 ** (k-1) + (n // k))  # 确定对应区间第几个数
        return int(num[n % k])  # 确定对应位数